#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define INF INT_MAX
#define V 6 // Define the number of vertices

typedef struct {
    int u, v, w;
} Edge;

void dijkstra(Edge edges[], int n, int m, int src, int target) {
    int dist[V];
    bool visited[V] = {false};

    for (int i = 0; i < V; i++) {
        dist[i] = INF;
    }
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = -1;
        for (int i = 0; i < V; i++) {
            if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
                u = i;
            }
        }

        if (dist[u] == INF) break;

        visited[u] = true;

        for (int i = 0; i < m; i++) {
            if (edges[i].u == u && !visited[edges[i].v] && dist[u] != INF && dist[u] + edges[i].w < dist[edges[i].v]) {
                dist[edges[i].v] = dist[u] + edges[i].w;
            }
        }
    }

    printf("%d\n", dist[target]);
}

int main() {
    Edge edges1[] = {
        {0, 1, 7}, {0, 2, 9}, {0, 5, 14},
        {1, 2, 10}, {1, 3, 15},
        {2, 3, 11}, {2, 5, 2},
        {3, 4, 6}, {4, 5, 9}
    };
    dijkstra(edges1, 6, 9, 0, 4);

    Edge edges2[] = {
        {0, 1, 10}, {0, 4, 3},
        {1, 2, 2}, {1, 4, 4},
        {2, 3, 9}, {3, 2, 7},
        {4, 1, 1}, {4, 2, 8}, {4, 3, 2}
    };
    dijkstra(edges2, 5, 9, 0, 3);

    return 0;
}
