#include <stdio.h>
#include <stdbool.h>

#define V 4 // Number of vertices

bool isSafe(int graph[V][V], int path[], int pos, int v) {
    // Check if this vertex is an adjacent vertex of the previously added vertex.
    if (graph[path[pos - 1]][v] == 0) return false;

    // Check if the vertex has already been included in the path
    for (int i = 0; i < pos; i++)
        if (path[i] == v) return false;

    return true;
}

bool hamCycleUtil(int graph[V][V], int path[], int pos) {
    // Base case: If all vertices are included in the path
    if (pos == V) return true;

    // Try different vertices as the next candidate in the Hamiltonian Path
    for (int v = 1; v < V; v++) {
        if (isSafe(graph, path, pos, v)) {
            path[pos] = v;

            // Recursion to construct the rest of the path
            if (hamCycleUtil(graph, path, pos + 1)) return true;

            // Backtrack
            path[pos] = -1;
        }
    }
    return false;
}

void hamCycle(int graph[V][V]) {
    int path[V];
    for (int i = 0; i < V; i++) path[i] = -1;

    path[0] = 0; // Start from the first vertex

    if (!hamCycleUtil(graph, path, 1)) {
        printf("No Hamiltonian Path exists\n");
        return;
    }

    printf("Hamiltonian Path exists: ");
    for (int i = 0; i < V; i++) {
        printf("%d ", path[i]);
    }
    printf("\n");
}

int main() {
    int graph[V][V] = {
        {0, 1, 0, 1},
        {1, 0, 1, 1},
        {0, 1, 0, 0},
        {1, 1, 0, 0}
    };

    hamCycle(graph);
    return 0;
}
