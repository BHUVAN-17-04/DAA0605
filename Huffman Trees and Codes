#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char character;
    int frequency;
    struct Node *left, *right;
} Node;

Node* createNode(char character, int frequency) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->character = character;
    node->frequency = frequency;
    node->left = node->right = NULL;
    return node;
}

int compare(const void *a, const void *b) {
    return ((Node*)a)->frequency - ((Node*)b)->frequency;
}

Node* buildHuffmanTree(Node* nodes[], int size) {
    qsort(nodes, size, sizeof(Node*), compare);
    while (size > 1) {
        Node *left = nodes[0];
        Node *right = nodes[1];
        Node *parent = createNode('\0', left->frequency + right->frequency);
        parent->left = left;
        parent->right = right;
        nodes[0] = parent;
        size--;
        for (int i = 1; i < size; i++) {
            nodes[i] = nodes[i + 1];
        }
        qsort(nodes, size, sizeof(Node*), compare);
    }
    return nodes[0];
}

void printCodes(Node* root, char* code, int length) {
    if (root->left == NULL && root->right == NULL) {
        code[length] = '\0';
        printf("('%c', '%s')\n", root->character, code);
        return;
    }
    code[length] = '0';
    printCodes(root->left, code, length + 1);
    code[length] = '1';
    printCodes(root->right, code, length + 1);
}

int main() {
    char characters1[] = {'a', 'b', 'c', 'd'};
    int frequencies1[] = {5, 9, 12, 13};
    int n1 = sizeof(characters1) / sizeof(characters1[0]);

    Node* nodes1[n1];
    for (int i = 0; i < n1; i++) {
        nodes1[i] = createNode(characters1[i], frequencies1[i]);
    }
    
    Node* root1 = buildHuffmanTree(nodes1, n1);
    char code[100];
    printCodes(root1, code, 0);

    char characters2[] = {'f', 'e', 'd', 'c', 'b', 'a'};
    int frequencies2[] = {5, 9, 12, 13, 16, 45};
    int n2 = sizeof(characters2) / sizeof(characters2[0]);

    Node* nodes2[n2];
    for (int i = 0; i < n2; i++) {
        nodes2[i] = createNode(characters2[i], frequencies2[i]);
    }
    
    Node* root2 = buildHuffmanTree(nodes2, n2);
    printCodes(root2, code, 0);

    return 0;
}
