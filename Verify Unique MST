#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int u, v, w;
} Edge;

int compareEdges(const void *a, const void *b) {
    return ((Edge*)a)->w - ((Edge*)b)->w;
}

int find(int parent[], int i) {
    if (parent[i] == i) return i;
    return find(parent, parent[i]);
}

void unionSets(int parent[], int rank[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    if (xroot != yroot) {
        if (rank[xroot] < rank[yroot]) {
            parent[xroot] = yroot;
        } else if (rank[xroot] > rank[yroot]) {
            parent[yroot] = xroot;
        } else {
            parent[yroot] = xroot;
            rank[xroot]++;
        }
    }
}

int isMSTUnique(Edge edges[], int n, int m, Edge given_mst[], int mst_size) {
    qsort(edges, m, sizeof(Edge), compareEdges);
    int parent[n], rank[n];
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    int result = 0;
    int edge_index = 0;
    for (int i = 0; i < m; i++) {
        int x = find(parent, edges[i].u);
        int y = find(parent, edges[i].v);

        if (x != y) {
            result += edges[i].w;
            unionSets(parent, rank, x, y);
            edge_index++;
        }
    }
    
    if (edge_index != n - 1) return 0;

    for (int i = 0; i < mst_size; i++) {
        int x = find(parent, given_mst[i].u);
        int y = find(parent, given_mst[i].v);
        if (x != y) return 0;
    }
    return 1;
}

int main() {
    Edge edges1[] = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };
    Edge given_mst1[] = {
        {2, 3, 4}, {0, 3, 5}, {0, 1, 10}
    };
    printf("Is the given MST unique? %s\n", isMSTUnique(edges1, 4, 5, given_mst1, 3) ? "True" : "False");

    Edge edges2[] = {
        {0, 1, 1}, {0, 2, 1},
        {1, 3, 2}, {2, 3, 2},
        {3, 4, 3}, {4, 2, 3}
    };
    Edge given_mst2[] = {
        {0, 1, 1}, {0, 2, 1}, {1, 3, 2}, {3, 4, 3}
    };
    printf("Is the given MST unique? %s\n", isMSTUnique(edges2, 5, 6, given_mst2, 4) ? "True" : "False");

    return 0;
}
