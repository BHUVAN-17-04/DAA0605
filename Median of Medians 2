#include <stdio.h>
#include <stdlib.h>

#define MAX 1000

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

int medianOfMedians(int arr[], int low, int high) {
    int n = high - low + 1;
    int median = (n % 2 == 0) ? (n / 2 - 1) : (n / 2);
    int medianArr[(n + 4) / 5];
    int medianCount = 0;
    for (int i = 0; i < n / 5; i++) {
        int subArr[5];
        for (int j = 0; j < 5; j++) {
            subArr[j] = arr[low + i * 5 + j];
        }
        // Sort subArr
        for (int j = 0; j < 5 - 1; j++) {
            for (int k = 0; k < 5 - j - 1; k++) {
                if (subArr[k] > subArr[k + 1]) {
                    int temp = subArr[k];
                    subArr[k] = subArr[k + 1];
                    subArr[k + 1] = temp;
                }
            }
        }
        medianArr[medianCount++] = subArr[2];
    }
    if (n % 5 != 0) {
        int subArr[n % 5];
        for (int i = 0; i < n % 5; i++) {
            subArr[i] = arr[low + n - (n % 5) + i];
        }
        // Sort subArr
        for (int i = 0; i < (n % 5) - 1; i++) {
            for (int j = 0; j < (n % 5) - i - 1; j++) {
                if (subArr[j] > subArr[j + 1]) {
                    int temp = subArr[j];
                    subArr[j] = subArr[j + 1];
                    subArr[j + 1] = temp;
                }
            }
        }
        medianArr[medianCount++] = subArr[(n % 5) / 2];
    }
    return medianArr[medianCount / 2];
}

int select(int arr[], int low, int high, int k) {
    if (low == high) return arr[low];

    int pivot = medianOfMedians(arr, low, high);
    int pivotIndex;
    for (pivotIndex = low; pivotIndex <= high; pivotIndex++) {
        if (arr[pivotIndex] == pivot) break;
    }

    int partitionIndex = partition(arr, low, high);
    if (k == partitionIndex) return arr[k];
    if (k < partitionIndex) return select(arr, low, partitionIndex - 1, k);
    return select(arr, partitionIndex + 1, high, k);
}

int main() {
    int arr1[] = {12, 3, 5, 7, 19};
    int k1 = 2;
    int arr2[] = {12, 3, 5, 7, 4, 19, 26};
    int k2 = 3;
    int arr3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int k3 = 6;

    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    int size3 = sizeof(arr3) / sizeof(arr3[0]);

    printf("The %d-th smallest element is %d\n", k1, select(arr1, 0, size1 - 1, k1));
    printf("The %d-th smallest element is %d\n", k2, select(arr2, 0, size2 - 1, k2));
    printf("The %d-th smallest element is %d\n", k3, select(arr3, 0, size3 - 1, k3));

    return 0;
}

