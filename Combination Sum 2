#include <stdio.h>
#include <stdlib.h>

void combinationSum2Util(int* candidates, int candidatesSize, int target, int* combination, int start, int combinationSize, int** result, int* returnSize, int* returnColumnSizes) {
    if (target == 0) {
        result[*returnSize] = (int*)malloc(combinationSize * sizeof(int));
        for (int i = 0; i < combinationSize; i++) {
            result[*returnSize][i] = combination[i];
        }
        returnColumnSizes[*returnSize] = combinationSize;
        (*returnSize)++;
        return;
    }
    for (int i = start; i < candidatesSize; i++) {
        if (i > start && candidates[i] == candidates[i - 1]) continue;
        if (candidates[i] > target) continue;
        combination[combinationSize] = candidates[i];
        combinationSum2Util(candidates, candidatesSize, target - candidates[i], combination, i + 1, combinationSize + 1, result, returnSize, returnColumnSizes);
    }
}

int** combinationSum2(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {
    int** result = (int**)malloc(150 * sizeof(int*));
    int* combination = (int*)malloc(target * sizeof(int));
    *returnSize = 0;
    *returnColumnSizes = (int*)malloc(150 * sizeof(int));
    combinationSum2Util(candidates, candidatesSize, target, combination, 0, 0, result, returnSize, *returnColumnSizes);
    free(combination);
    return result;
}

int main() {
    int candidates[] = {10, 1, 2, 7, 6, 1, 5};
    int target = 8;
    int returnSize;
    int* returnColumnSizes;
    int** result = combinationSum2(candidates, sizeof(candidates) / sizeof(candidates[0]), target, &returnSize, &returnColumnSizes);

    for (int i = 0; i < returnSize; i++) {
        for (int j = 0; j < returnColumnSizes[i]; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
        free(result[i]);
    }
    free(result);
    free(returnColumnSizes);

    return 0;
}
