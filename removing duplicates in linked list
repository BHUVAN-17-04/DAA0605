#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

void deleteDuplicates(struct ListNode *head) {
    struct ListNode *current = head;

    while (current != NULL && current->next != NULL) {
        if (current->val == current->next->val) {
            // Duplicate found; skip the next node
            struct ListNode *duplicate = current->next;
            current->next = duplicate->next;
            free(duplicate);  // Free memory of the duplicate node
        } else {
            // Move to the next node
            current = current->next;
        }
    }
}

struct ListNode* createNode(int value) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = value;
    newNode->next = NULL;
    return newNode;
}

void printList(struct ListNode* head) {
    struct ListNode* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->val);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    // Create the linked list [1 -> 1 -> 2]
    struct ListNode* head = createNode(1);
    head->next = createNode(1);
    head->next->next = createNode(2);

    printf("Original list: ");
    printList(head);

    // Remove duplicates
    deleteDuplicates(head);

    printf("List after removing duplicates: ");
    printList(head);

    // Free the remaining nodes
    while (head != NULL) {
        struct ListNode* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
