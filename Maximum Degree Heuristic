#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct {
    int u, v;
} Edge;

int degree[MAX_VERTICES];

int compareEdges(const void *a, const void *b) {
    return degree[(*(Edge*)b).u] + degree[(*(Edge*)b).v] - (degree[(*(Edge*)a).u] + degree[(*(Edge*)a).v]);
}

void vertexCover(int n, Edge edges[], int m) {
    int covered[MAX_VERTICES] = {0};
    int vertex_cover[MAX_VERTICES];
    int cover_size = 0;

    for (int i = 0; i < n; i++) {
        degree[i] = 0;
    }

    for (int i = 0; i < m; i++) {
        degree[edges[i].u]++;
        degree[edges[i].v]++;
    }

    qsort(edges, m, sizeof(Edge), compareEdges);

    for (int i = 0; i < m; i++) {
        if (!covered[edges[i].u] && !covered[edges[i].v]) {
            vertex_cover[cover_size++] = edges[i].u;
            vertex_cover[cover_size++] = edges[i].v;
            covered[edges[i].u] = 1;
            covered[edges[i].v] = 1;
        }
    }

    printf("Vertex Cover: ");
    for (int i = 0; i < cover_size; i++) {
        printf("%d ", vertex_cover[i]);
    }
    printf("\n");
}

int main() {
    Edge edges1[] = {
        {0, 1}, {0, 2}, {1, 3},
        {1, 4}, {2, 4}, {3, 5}, {4, 5}
    };
    vertexCover(6, edges1, 7);

    Edge edges2[] = {
        {0, 1}, {0, 2}, {0, 3},
        {1, 4}, {2, 4}
    };
    vertexCover(5, edges2, 5);

    return 0;
}
