#include <stdio.h>
#include <stdlib.h>

#define V 4
#define E 5

typedef struct {
    int src, dest, weight;
} Edge;

int find(int parent[], int i) {
    if (parent[i] == i)
        return i;
    return find(parent, parent[i]);
}

void unionSets(int parent[], int rank[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    if (rank[xroot] < rank[yroot])
        parent[xroot] = yroot;
    else if (rank[xroot] > rank[yroot])
        parent[yroot] = xroot;
    else {
        parent[yroot] = xroot;
        rank[xroot]++;
    }
}

void boruvkaMST(Edge edges[], int numEdges) {
    Edge result[V];
    int parent[V];
    int rank[V];
    int cheapest[V];
    int numTrees = V;
    int e = 0;

    for (int i = 0; i < V; i++) {
        parent[i] = i;
        rank[i] = 0;
        result[i] = (Edge){-1, -1, INT_MAX};
    }

    while (numTrees > 1) {
        for (int i = 0; i < V; i++) {
            cheapest[i] = -1;
        }

        for (int i = 0; i < numEdges; i++) {
            int set1 = find(parent, edges[i].src);
            int set2 = find(parent, edges[i].dest);

            if (set1 != set2) {
                if (cheapest[set1] == -1 || edges[cheapest[set1]].weight > edges[i].weight)
                    cheapest[set1] = i;

                if (cheapest[set2] == -1 || edges[cheapest[set2]].weight > edges[i].weight)
                    cheapest[set2] = i;
            }
        }

        for (int i = 0; i < V; i++) {
            if (cheapest[i] != -1) {
                int set1 = find(parent, edges[cheapest[i]].src);
                int set2 = find(parent, edges[cheapest[i]].dest);

                if (set1 != set2) {
                    result[e++] = edges[cheapest[i]];
                    unionSets(parent, rank, set1, set2);
                    numTrees--;
                }
            }
        }
    }

    printf("Edge \tWeight\n");
    for (int i = 0; i < e; i++) {
        printf("%d - %d \t%d \n", result[i].src, result[i].dest, result[i].weight);
    }
}

int main() {
    Edge edges[] = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4} };
    int numEdges = sizeof(edges) / sizeof(edges[0]);

    boruvkaMST(edges, numEdges);

    return 0;
}
