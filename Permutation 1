#include <stdio.h>
#include <stdlib.h>

void permuteUtil(int* nums, int numsSize, int** result, int* returnSize, int* returnColumnSizes, int* visited, int* permutation, int pos) {
    if (pos == numsSize) {
        result[*returnSize] = (int*)malloc(numsSize * sizeof(int));
        for (int i = 0; i < numsSize; i++) {
            result[*returnSize][i] = permutation[i];
        }
        returnColumnSizes[*returnSize] = numsSize;
        (*returnSize)++;
        return;
    }
    for (int i = 0; i < numsSize; i++) {
        if (visited[i]) continue;
        visited[i] = 1;
        permutation[pos] = nums[i];
        permuteUtil(nums, numsSize, result, returnSize, returnColumnSizes, visited, permutation, pos + 1);
        visited[i] = 0;
    }
}

int** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    int** result = (int**)malloc(720 * sizeof(int*));
    int* permutation = (int*)malloc(numsSize * sizeof(int));
    int* visited = (int*)malloc(numsSize * sizeof(int));
    *returnSize = 0;
    *returnColumnSizes = (int*)malloc(720 * sizeof(int));
    for (int i = 0; i < numsSize; i++) visited[i] = 0;
    permuteUtil(nums, numsSize, result, returnSize, *returnColumnSizes, visited, permutation, 0);
    free(permutation);
    free(visited);
    return result;
}

int main() {
    int nums[] = {1, 2, 3};
    int returnSize;
    int* returnColumnSizes;
    int** result = permute(nums, sizeof(nums) / sizeof(nums[0]), &returnSize, &returnColumnSizes);

    for (int i = 0; i < returnSize; i++) {
        for (int j = 0; j < returnColumnSizes[i]; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
        free(result[i]);
    }
    free(result);
    free(returnColumnSizes);

    return 0;
}
