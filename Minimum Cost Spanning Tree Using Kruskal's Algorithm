#include <stdio.h>
#include <stdlib.h>

#define V 4

typedef struct {
    int src, dest, weight;
} Edge;

int compare(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

int find(int parent[], int i) {
    if (parent[i] == i)
        return i;
    return find(parent, parent[i]);
}

void unionSets(int parent[], int rank[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    if (rank[xroot] < rank[yroot])
        parent[xroot] = yroot;
    else if (rank[xroot] > rank[yroot])
        parent[yroot] = xroot;
    else {
        parent[yroot] = xroot;
        rank[xroot]++;
    }
}

void kruskalMST(Edge edges[], int numEdges) {
    Edge result[V];
    int parent[V];
    int rank[V];
    int e = 0;
    int i = 0;

    for (int v = 0; v < V; v++) {
        parent[v] = v;
        rank[v] = 0;
    }

    qsort(edges, numEdges, sizeof(Edge), compare);

    while (e < V - 1 && i < numEdges) {
        Edge next_edge = edges[i++];

        int x = find(parent, next_edge.src);
        int y = find(parent, next_edge.dest);

        if (x != y) {
            result[e++] = next_edge;
            unionSets(parent, rank, x, y);
        }
    }

    printf("Edge \tWeight\n");
    for (int i = 0; i < e; i++) {
        printf("%d - %d \t%d \n", result[i].src, result[i].dest, result[i].weight);
    }
}

int main() {
    Edge edges[] = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4} };
    int numEdges = sizeof(edges) / sizeof(edges[0]);

    kruskalMST(edges, numEdges);

    return 0;
}
