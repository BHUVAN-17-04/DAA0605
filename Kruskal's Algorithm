#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int u, v, w;
} Edge;

int compareEdges(const void *a, const void *b) {
    return ((Edge*)a)->w - ((Edge*)b)->w;
}

int find(int parent[], int i) {
    if (parent[i] == i) return i;
    return find(parent, parent[i]);
}

void unionSets(int parent[], int rank[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    if (xroot != yroot) {
        if (rank[xroot] < rank[yroot]) {
            parent[xroot] = yroot;
        } else if (rank[xroot] > rank[yroot]) {
            parent[yroot] = xroot;
        } else {
            parent[yroot] = xroot;
            rank[xroot]++;
        }
    }
}

void kruskal(Edge edges[], int n, int m) {
    qsort(edges, m, sizeof(Edge), compareEdges);
    int parent[n], rank[n];
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    int result = 0;
    printf("Edges in MST:\n");
    for (int i = 0; i < m; i++) {
        int x = find(parent, edges[i].u);
        int y = find(parent, edges[i].v);

        if (x != y) {
            printf("(%d, %d, %d)\n", edges[i].u, edges[i].v, edges[i].w);
            result += edges[i].w;
            unionSets(parent, rank, x, y);
        }
    }
    printf("Total weight of MST: %d\n", result);
}

int main() {
    Edge edges1[] = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };
    kruskal(edges1, 4, 5);

    Edge edges2[] = {
        {0, 1, 2}, {0, 3, 6},
        {1, 2, 3}, {1, 3, 8},
        {1, 4, 5}, {2, 4, 7},
        {3, 4, 9}
    };
    kruskal(edges2, 5, 7);

    return 0;
}
